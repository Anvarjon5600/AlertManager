from flask import Flask, jsonify, request
from flask_cors import CORS
import os
import requests
import openpyxl
import google.generativeai as genai
import smtplib
import time
import json
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
from datetime import datetime, timezone
from dotenv import load_dotenv
from openpyxl.styles import Font, Alignment, PatternFill, Border, Side

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API-–∫–ª—é—á –¥–ª—è Gemini
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
if not GEMINI_API_KEY:
    raise Exception("GEMINI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env.")

genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-2.0-flash")

# –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞—Ö
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

class SafeDict(dict):
    def __missing__(self, key):
        return "{" + key + "}"

app = Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)

#! Users API
USERS_FILE = 'users.json'


def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, 'r') as f:
            return json.load(f)
    return []

def save_users(users):
    with open(USERS_FILE, 'w') as f:
        json.dump(users, f, indent=2)

@app.route('/api/users', methods=['GET'])
def get_users():
    users = load_users()
    return jsonify(users)

@app.route('/api/users', methods=['POST'])
def add_user():
    data = request.get_json()
    users = load_users()
    new_user = {
        'id': len(users) + 1,
        'name': data['name'],
        'email': data['email'],
        'password': data['password']
    }
    users.append(new_user)
    save_users(users)
    return jsonify(new_user), 201

@app.route('/api/users/<int:id>', methods=['PUT'])
def update_user(id):
    data = request.get_json()
    users = load_users()
    updated_users = [user if user['id'] != id else {
        'id': id,
        'name': data['name'],
        'email': data['email'],
        'password': data['password']
    } for user in users]
    save_users(updated_users)
    return jsonify({'message': 'User updated'})

@app.route('/api/users/<int:id>', methods=['DELETE'])
def delete_user(id):
    users = load_users()
    updated_users = [user for user in users if user['id'] != id]
    save_users(updated_users)
    return jsonify({'message': 'User deleted'})    


#! Nutanix API
def get_nutanix_alerts(vip, username, password):
    url = f"https://{vip}:9440/PrismGateway/services/rest/v1/alerts"
    response = requests.get(url, auth=(username, password), verify=False)
    print(f"[INFO] –ó–∞–ø—Ä–æ—Å –∞–ª–µ—Ä—Ç–æ–≤ —Å Nutanix {vip}...", response.status_code)
    if response.status_code != 200:
        raise Exception(f"–û—à–∏–±–∫–∞: {response.status_code} {response.text}")
    return response.json().get("entities", [])

def process_alert(alert):
    try:
        message_template = alert.get("message", "No message")
        context = dict(zip(alert.get("contextTypes", []), alert.get("contextValues", [])))
        message = message_template.format_map(SafeDict(context))
        categories = alert.get("categories", [])
        first_category = categories[0] if categories else ""
        severity = alert.get("severity", "").lstrip("k")
        id = alert.get("id", "")
        return {
            "message": message,
            "time": alert.get("createdTimeStampInUsecs", 0),
            "categories": first_category,
            "severity": severity,
            "id": id,
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–∞: {str(e)}")
        return {"message": "–û—à–∏–±–∫–∞", "time": 0, "categories": "", "severity": ""}

def gemini_recommendation(alert):
    print(alert["message"])
    if not alert["message"] or "{" in alert["message"]:
        print("[INFO] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...üëÄ")
        return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
    prompt = (
        "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ Nutanix. –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –∫–æ—Ä–æ—Ç–∫–∏–π –∏ –ø–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π –ø–æ —ç—Ç–æ–π –∞–ª–µ—Ä—Ç—É:\n\n , –∏ –ø—Ä–∏–≤–µ–¥–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ —ç—Ç–æ–º—É –∞–ª–µ—Ä—Ç—É."
        f"–°–æ–æ–±—â–µ–Ω–∏–µ: {alert['message']}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {alert['categories']}\n"
        f"Severity: {alert['severity']}\n\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:"
    )
    try:
        print("[INFO] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Google Gemini...‚ú®")
        print(GEMINI_API_KEY, "GEMINI_API_KEY")
        model = genai.GenerativeModel("gemini-2.0-flash")
        response = model.generate_content(prompt)
        return response.text.strip() if response and response.text else "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ Gemini: {str(e)}")
        return "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò"



@app.route('/api/alerts', methods=['POST'])
def get_alerts():
    data = request.get_json()
    vip = data.get('vip')
    username = data.get('username')
    password = data.get('password')

    try:
        alerts = get_nutanix_alerts(vip, username, password)
        unresolved_alerts = [process_alert(alert) for alert in alerts if not alert.get("resolved", False)]
        return jsonify(unresolved_alerts)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/nutanix/gemini', methods=['POST'])  # –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
def nutanix_gemini():
    data = request.get_json()
    alert = data.get('alert')  # –ü–æ–ª—É—á–∞–µ–º –∞–ª–µ—Ä—Ç –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞

    if alert:
        try:
            print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª–µ—Ä—Ç–∞: {alert}")
            recommendation = gemini_recommendation(alert)
            return jsonify({'recommendation': recommendation})
        except Exception as e:
            return jsonify({'error': f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª–µ—Ä—Ç–∞: {str(e)}'}), 500
    else:
        return jsonify({'error': 'Alert not found in request'}), 400

#! XClarity API

def get_xclarity_alerts(host, username, password):
    try:
        url = f"https://{host}/events/activeAlerts"
        response = requests.get(url, auth=(username, password), verify=False)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        return {'error': str(e)}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ Gemini
def get_gemini_recommendation(alert):
    prompt = f"–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ XClarity. –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –∫–æ—Ä–æ—Ç–∫–∏–π –∏ –ø–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π –ø–æ —ç—Ç–æ–π –∞–ª–µ—Ä—Ç—É: {alert['msg']},–æ–Ω –≤ —Ç–∞–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {alert['severityText']}. –ï–≥–æ —Å–∏—Ä–µ–Ω–∏—è –Ω–æ–º–µ—Ä: {alert['systemSerialNumberText']}."
    try:
        response = model.generate_content(prompt)
        print(f"Gemini response: {response.text}")
        return response.text
    except Exception as e:
        print(f"Error in get_gemini_recommendation: {str(e)}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ Gemini: {str(e)}"

@app.route('/api/xclarity/alerts', methods=['POST'])
def xclarity_alerts():
    data = request.get_json()
    host = data.get('host')
    username = data.get('username')
    password = data.get('password')

    alerts = get_xclarity_alerts(host, username, password)
    return jsonify(alerts)

@app.route('/api/xclarity/gemini', methods=['POST'])
def xclarity_gemini():
    try:
        data = request.get_json()
        print(f"Received data: {data}")
        alert = data.get('data').get('alert')

        if alert:
            recommendation = get_gemini_recommendation(alert)
            print(f"Recommendation: {recommendation}")
            return jsonify({'recommendation': recommendation})
        else:
            print("Alert not found in request")
            return jsonify({'error': 'Alert not found'}), 400
    except Exception as e:
        print(f"Error in xclarity_gemini: {str(e)}")
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True, port=5000) # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –Ω–∞ –ø–æ—Ä—Ç—É 5000